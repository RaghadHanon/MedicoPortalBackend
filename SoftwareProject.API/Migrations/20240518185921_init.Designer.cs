// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftwareProject.API;

#nullable disable

namespace SoftwareProject.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240518185921_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SoftwareProject.API.Entites.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Allergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergyId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllergyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Symptons")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AllergyId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.BloodPressure", b =>
                {
                    b.Property<int>("BloodPressureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodPressureId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BloodPressureId");

                    b.HasIndex("PatientId");

                    b.ToTable("BloodPressures");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.BloodSugar", b =>
                {
                    b.Property<int>("BloodSugarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodSugarId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BloodSugarId");

                    b.HasIndex("PatientId");

                    b.ToTable("BloodSugars");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.ChronicDisease", b =>
                {
                    b.Property<int>("ChronicDiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChronicDiseaseId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Causes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChronicDiseaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfDiagonsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Digonsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChronicDiseaseId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClinicId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalSpecificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("ClinicId")
                        .IsUnique()
                        .HasFilter("[ClinicId] IS NOT NULL");

                    b.HasIndex("MedicalSpecificationId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.GeneralReport", b =>
                {
                    b.Property<int>("GeneralReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneralReportId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeneralReportId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("GeneralReports");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.MedicalSpecification", b =>
                {
                    b.Property<int>("MedicalSpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalSpecificationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalSpecificationId");

                    b.ToTable("MedicalSpecifications");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMaintenace")
                        .HasColumnType("bit");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("MedicineId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("PatientId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Admin", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.User", null)
                        .WithOne()
                        .HasForeignKey("SoftwareProject.API.Entites.Admin", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Allergy", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.Doctor", "Doctor")
                        .WithMany("Allergys")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoftwareProject.API.Entites.Patient", "Patient")
                        .WithMany("Allergys")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoftwareProject.API.Entites.Request", "Request")
                        .WithOne("Allergy")
                        .HasForeignKey("SoftwareProject.API.Entites.Allergy", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.BloodPressure", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.Patient", "Patient")
                        .WithMany("BloodPressure")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.BloodSugar", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.Patient", "Patient")
                        .WithMany("BloodSugar")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.ChronicDisease", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.Doctor", "Doctor")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoftwareProject.API.Entites.Patient", "Patient")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoftwareProject.API.Entites.Request", "Request")
                        .WithOne("ChronicDisease")
                        .HasForeignKey("SoftwareProject.API.Entites.ChronicDisease", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Doctor", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.Clinic", "Clinic")
                        .WithOne("Doctor")
                        .HasForeignKey("SoftwareProject.API.Entites.Doctor", "ClinicId");

                    b.HasOne("SoftwareProject.API.Entites.MedicalSpecification", "MedicalSpecification")
                        .WithMany("Doctors")
                        .HasForeignKey("MedicalSpecificationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SoftwareProject.API.Entites.User", null)
                        .WithOne()
                        .HasForeignKey("SoftwareProject.API.Entites.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("MedicalSpecification");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.GeneralReport", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.Doctor", "Doctor")
                        .WithMany("GeneralReports")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoftwareProject.API.Entites.Patient", "Patient")
                        .WithMany("GeneralReports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoftwareProject.API.Entites.Request", "Request")
                        .WithOne("GeneralReport")
                        .HasForeignKey("SoftwareProject.API.Entites.GeneralReport", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Medicine", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.Doctor", "Doctor")
                        .WithMany("Medicines")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoftwareProject.API.Entites.Patient", "Patient")
                        .WithMany("Medicines")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoftwareProject.API.Entites.Request", "Request")
                        .WithOne("Medicine")
                        .HasForeignKey("SoftwareProject.API.Entites.Medicine", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Patient", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.User", null)
                        .WithOne()
                        .HasForeignKey("SoftwareProject.API.Entites.Patient", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Request", b =>
                {
                    b.HasOne("SoftwareProject.API.Entites.Doctor", "Doctor")
                        .WithMany("Requests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SoftwareProject.API.Entites.Patient", "Patient")
                        .WithMany("Requests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Clinic", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Doctor", b =>
                {
                    b.Navigation("Allergys");

                    b.Navigation("ChronicDiseases");

                    b.Navigation("GeneralReports");

                    b.Navigation("Medicines");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.MedicalSpecification", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Patient", b =>
                {
                    b.Navigation("Allergys");

                    b.Navigation("BloodPressure");

                    b.Navigation("BloodSugar");

                    b.Navigation("ChronicDiseases");

                    b.Navigation("GeneralReports");

                    b.Navigation("Medicines");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SoftwareProject.API.Entites.Request", b =>
                {
                    b.Navigation("Allergy");

                    b.Navigation("ChronicDisease");

                    b.Navigation("GeneralReport");

                    b.Navigation("Medicine");
                });
#pragma warning restore 612, 618
        }
    }
}
